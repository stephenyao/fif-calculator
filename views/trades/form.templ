package trades

import "fif-clacultor/internal/model"
import "strconv"

templ TradeForm(trade *model.Trade, action templ.SafeURL) {
    <div class="min-h-screen bg-gray-100 p-6 flex items-center justify-center">
        <form action={action} method="post" class="bg-white shadow-md rounded-xl p-8 w-full max-w-xl space-y-6">
            <h2 class="text-2xl font-bold text-gray-800">Enter New Trade</h2>

            <div>
              <label for="symbol" class="block mb-1 font-medium text-gray-700">Symbol</label>
              <input id="symbol"
                name="symbol"
                value={symbol(trade)}
                type="text" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
            </div>

            <div>
              <label for="buyDate" class="block mb-1 font-medium text-gray-700">Buy Date</label>
              <input id="buyDate"
                value={buyDate(trade)}
              name="buyDate" type="date" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
            </div>

            <div>
              <label for="quantity" class="block mb-1 font-medium text-gray-700">Quantity</label>
              <input id="quantity"
                value={quantity(trade)}
                name="quantity" type="number" step="any" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
            </div>

            <div>
              <label for="price" class="block mb-1 font-medium text-gray-700">Price</label>
              <input id="price"
                value={price(trade)}
                name="price" type="number" step="any" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
            </div>

            <div>
              <label for="currency" class="block mb-1 font-medium text-gray-700">Currency</label>
              <input id="currency"
                value={currency(trade)}
                name="currency" type="text" value="USD" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
            </div>

            <div>
                <label for="action" class="block mb-1 font-medium text-gray-700">Action</label>
                <select id="action" name="action" class="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring focus:ring-blue-300">
                    <option value="buy" selected?={isSelected(trade, "buy")}>Buy</option>
                    <option value="sell" selected?={isSelected(trade, "sell")}>Sell</option>
                </select>
            </div>

            <div class="text-right">
              <button type="submit" class="bg-blue-600 text-white font-medium py-2 px-4 rounded hover:bg-blue-700 transition">Save Trade</button>
            </div>
        </form>
    </div>
}

func symbol(trade *model.Trade) string {
	if trade != nil {
		return trade.Symbol
	}
	return ""
}

func buyDate(trade *model.Trade) string {
	if trade != nil {
		return trade.BuyDate
	}
	return ""
}

func quantity(trade *model.Trade) string {
	if trade != nil {
		return strconv.FormatFloat(trade.Quantity, 'f', -1, 64)
	}
	return ""
}

func price(trade *model.Trade) string {
	if trade != nil {
		return strconv.FormatFloat(trade.Price, 'f', -1, 64)
	}
	return ""
}

func currency(trade *model.Trade) string {
	if trade != nil {
		return trade.Currency
	}
	return "USD"
}

func isSelected(trade *model.Trade, val string) bool {
	if trade != nil && trade.Action == val {
		return true
	}
	return false
}

